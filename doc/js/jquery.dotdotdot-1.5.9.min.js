/*
 *	jQuery dotdotdot 1.5.9
 *
 *	Copyright (c) 2013 Fred Heusschen
 *	www.frebsite.nl
 *
 *	Plugin website:
 *	dotdotdot.frebsite.nl
 *
 *	Dual licensed under the MIT and GPL licenses.
 *	http://en.wikipedia.org/wiki/MIT_License
 *	http://en.wikipedia.org/wiki/GNU_General_Public_License
 */

(function (a) {
  function c(a, b, c) {
    const d = a.children();


    let e = !1;
    a.empty();
    for (let g = 0, h = d.length; h > g; g++) {
      const i = d.eq(g);
      if ((a.append(i), c && a.append(c), f(a, b))) {
        i.remove(), (e = !0);
        break;
      }
      c && c.remove();
    }
    return e;
  }
  function d(b, c, g, h, i) {
    const j = b.contents();


    let k = !1;
    b.empty();
    for (
      let l = 'table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, select, optgroup, option, textarea, script, style',
        m = 0,
        n = j.length;
      n > m && !k;
      m++
    ) {
      const o = j[m];


      const p = a(o);
      void 0 !== o
        && (b.append(p),
        i && b[b.is(l) ? 'after' : 'append'](i),
        o.nodeType == 3
          ? f(g, h) && (k = e(p, c, g, h, i))
          : (k = d(p, c, g, h, i)),
        k || (i && i.remove()));
    }
    return k;
  }
  function e(a, b, c, d, h) {
    let k = !1;


    var l = a[0];
    if (l === void 0) return !1;
    for (
      var m = d.wrap == 'letter' ? '' : ' ',
        n = j(l).split(m),
        o = -1,
        p = -1,
        q = 0,
        r = n.length - 1;
      r >= q;

    ) {
      const s = Math.floor((q + r) / 2);
      if (s == p) break;
      (p = s),
      i(l, n.slice(0, p + 1).join(m) + d.ellipsis),
      f(c, d) ? (r = p) : ((o = p), (q = p));
    }
    if (o == -1 || (n.length == 1 && n[0].length == 0)) {
      const u = a.parent();
      a.remove();
      const v = h ? h.length : 0;
      if (u.contents().size() > v) {
        const w = u.contents().eq(-1 - v);
        k = e(w, b, c, d, h);
      } else {
        const x = u.prev();


        var l = x.contents().eq(-1)[0];
        if (l !== void 0) {
          var t = g(j(l), d);
          i(l, t), h && x.append(h), u.remove(), (k = !0);
        }
      }
    } else {
      var t = g(n.slice(0, o + 1).join(m), d);
      (k = !0), i(l, t);
    }
    return k;
  }
  function f(a, b) {
    return a.innerHeight() > b.maxHeight;
  }
  function g(b, c) {
    for (; a.inArray(b.slice(-1), c.lastCharacter.remove) > -1;) b = b.slice(0, -1);
    return (
      a.inArray(b.slice(-1), c.lastCharacter.noEllipsis) < 0
        && (b += c.ellipsis),
      b
    );
  }
  function h(a) {
    return { width: a.innerWidth(), height: a.innerHeight() };
  }
  function i(a, b) {
    a.innerText
      ? (a.innerText = b)
      : a.nodeValue
        ? (a.nodeValue = b)
        : a.textContent && (a.textContent = b);
  }
  function j(a) {
    return a.innerText
      ? a.innerText
      : a.nodeValue
        ? a.nodeValue
        : a.textContent
          ? a.textContent
          : '';
  }
  function k(b, c) {
    return b === void 0
      ? !1
      : b
        ? typeof b === 'string'
          ? ((b = a(b, c)), b.length ? b : !1)
          : typeof b === 'object'
            ? b.jquery === void 0
              ? !1
              : b
            : !1
        : !1;
  }
  function l(a) {
    for (
      var b = a.innerHeight(),
        c = ['paddingTop', 'paddingBottom'],
        d = 0,
        e = c.length;
      e > d;
      d++
    ) {
      let f = parseInt(a.css(c[d]), 10);
      isNaN(f) && (f = 0), (b -= f);
    }
    return b;
  }
  function m(a, b) {
    return a
      ? ((b = typeof b === 'string' ? `dotdotdot: ${b}` : ['dotdotdot:', b]),
      window.console !== void 0
          && window.console.log !== void 0
          && window.console.log(b),
      !1)
      : !1;
  }
  if (!a.fn.dotdotdot) {
    (a.fn.dotdotdot = function (e) {
      if (this.length == 0) {
        return (
          (e && e.debug === !1)
            || m(!0, `No element found for "${this.selector}".`),
          this
        );
      }
      if (this.length > 1) {
        return this.each(function () {
          a(this).dotdotdot(e);
        });
      }
      const g = this;
      g.data('dotdotdot') && g.trigger('destroy.dot'),
      g.data('dotdotdot-style', g.attr('style')),
      g.css('word-wrap', 'break-word'),
      (g.bind_events = function () {
        return (
          g
            .bind('update.dot', (b, e) => {
              b.preventDefault(),
              b.stopPropagation(),
              (j.maxHeight = typeof j.height === 'number' ? j.height : l(g)),
              (j.maxHeight += j.tolerance),
              e !== void 0
                    && ((typeof e === 'string' || e instanceof HTMLElement)
                      && (e = a('<div />')
                        .append(e)
                        .contents()),
                    e instanceof a && (i = e)),
              (q = g.wrapInner('<div class="dotdotdot" />').children()),
              q
                .empty()
                .append(i.clone(!0))
                .css({
                  height: 'auto',
                  width: 'auto',
                  border: 'none',
                  padding: 0,
                  margin: 0,
                });
              let h = !1;


              let k = !1;
              return (
                n.afterElement
                    && ((h = n.afterElement.clone(!0)), n.afterElement.remove()),
                f(q, j)
                    && (k = j.wrap == 'children' ? c(q, j, h) : d(q, g, q, j, h)),
                q.replaceWith(q.contents()),
                (q = null),
                a.isFunction(j.callback) && j.callback.call(g[0], k, i),
                (n.isTruncated = k),
                k
              );
            })
            .bind('isTruncated.dot', (a, b) => (
              a.preventDefault(),
              a.stopPropagation(),
              typeof b === 'function' && b.call(g[0], n.isTruncated),
              n.isTruncated
            ))
            .bind('originalContent.dot', (a, b) => (
              a.preventDefault(),
              a.stopPropagation(),
              typeof b === 'function' && b.call(g[0], i),
              i
            ))
            .bind('destroy.dot', (a) => {
              a.preventDefault(),
              a.stopPropagation(),
              g
                .unwatch()
                .unbind_events()
                .empty()
                .append(i)
                .attr('style', g.data('dotdotdot-style'))
                .data('dotdotdot', !1);
            }),
          g
        );
      }),
      (g.unbind_events = function () {
        return g.unbind('.dot'), g;
      }),
      (g.watch = function () {
        if ((g.unwatch(), j.watch == 'window')) {
          const b = a(window);


          let c = b.width();


          let d = b.height();
          b.bind(`resize.dot${n.dotId}`, () => {
            (c == b.width() && d == b.height() && j.windowResizeFix)
                || ((c = b.width()),
                (d = b.height()),
                p && clearInterval(p),
                (p = setTimeout(() => {
                  g.trigger('update.dot');
                }, 10)));
          });
        } else {
          (o = h(g)),
          (p = setInterval(() => {
            const a = h(g);
            (o.width != a.width || o.height != a.height)
                  && (g.trigger('update.dot'), (o = h(g)));
          }, 100));
        }
        return g;
      }),
      (g.unwatch = function () {
        return (
          a(window).unbind(`resize.dot${n.dotId}`), p && clearInterval(p), g
        );
      });
      var i = g.contents();


      var j = a.extend(!0, {}, a.fn.dotdotdot.defaults, e);


      var n = {};


      var o = {};


      var p = null;


      var q = null;
      return (
        (n.afterElement = k(j.after, g)),
        (n.isTruncated = !1),
        (n.dotId = b++),
        g
          .data('dotdotdot', !0)
          .bind_events()
          .trigger('update.dot'),
        j.watch && g.watch(),
        g
      );
    }),
    (a.fn.dotdotdot.defaults = {
      ellipsis: '... ',
      wrap: 'word',
      lastCharacter: {
        remove: [' ', ',', ';', '.', '!', '?'],
        noEllipsis: [],
      },
      tolerance: 0,
      callback: null,
      after: null,
      height: null,
      watch: !1,
      windowResizeFix: !0,
      debug: !1,
    });
    var b = 1;


    const n = a.fn.html;
    a.fn.html = function (a) {
      return a !== void 0
        ? this.data('dotdotdot') && typeof a !== 'function'
          ? this.trigger('update', [a])
          : n.call(this, a)
        : n.call(this);
    };
    const o = a.fn.text;
    a.fn.text = function (b) {
      if (b !== void 0) {
        if (this.data('dotdotdot')) {
          const c = a('<div />');
          return (
            c.text(b), (b = c.html()), c.remove(), this.trigger('update', [b])
          );
        }
        return o.call(this, b);
      }
      return o.call(this);
    };
  }
}(jQuery));
